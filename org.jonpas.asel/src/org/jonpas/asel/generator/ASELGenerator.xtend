/*
 * generated by Xtext 2.19.0
 */
package org.jonpas.asel.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.jonpas.asel.asel.Use
import org.jonpas.asel.asel.InitPin
import org.jonpas.asel.asel.InitVar
import org.jonpas.asel.asel.InitClass
import org.jonpas.asel.asel.VarValue
import org.jonpas.asel.asel.ValueBool
import org.jonpas.asel.asel.ValueInt
import org.jonpas.asel.asel.ValueFloat

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ASELGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var result = "// Generated by ASEL\n\n"

		// Use
		result += "#include <Arduino.h>\n"
		for (use : resource.allContents.toIterable.filter(Use)) {
			result += "#include <" + use.name + ".h>\n";
			
		}
		// TODO WiFi include if 'InitWiFi' present
		result += "\n"

		// Init
		for (pin : resource.allContents.toIterable.filter(InitPin)) {
			result += "const int " + pin.name + " = " + pin.value + ";\n"
		}
		result += "\n"

		for (variable : resource.allContents.toIterable.filter(InitVar)) {
			result += variable.type + " " + variable.name

			val type = variable.type
			val single = variable.single
			val array = variable.array

			if (array !== null) {
				// Array initializer
				result += "["
				if (array.data.variable !== null) {
					result += array.data.variable.name // Variable length
				} else {
					result += array.data.length // Fixed length
				}
				result += "] = {"

				for (value : array.value) {
					result += getValue(type, value.value)

					if (value != array.value.last) {
						result += ", "
					}
				}
				result += "}"
			} else {
				// Single variable initializer
				result += " = "

				if (single === null) {
					// Default initializers
					result += getDefaultValue(type)
				} else {
					var value = single.value.value

					if (value === null) {
						// Function/Method/Expression initializer
						result += "TODO func/method call or expression" //single.value.func
					} else if (value.name !== null) {
						// Copy initializer
						result += value.name
					} else {
						// Value initializer
						result += getValue(type, value)
					}
				}
			}
			result += ";\n"
		}
		result += "\n"

		for (className : resource.allContents.toIterable.filter(InitClass)) {
			result += className.className + " " + className.name + "("

			for (param : className.param) {
				var value = param.value

				if (value === null) {
					// Function/Method/Expression paremeter
					result += "TODO func/method call or expression" //single.value.func
				} else if (value.name !== null) {
					// Variable parameter
					result += value.name
				} else {
					// Value parameter
					val type = (param.eContainer.eContainer as InitVar).type
					result += getValue(type, value)
				}

				if (param != className.param.last) {
					result += ", "
				}
			}
			result += ");\n"
		}

		// TODO PageHandler, WiFi

		result += "\n"

		// Prepare
		result += "void setup() {\n"
		// TODO Prepare Code
		result += "}\n\n"

		// Run
		result += "void loop() {\n"
		// TODO Run Code
		result += "}\n\n"

		fsa.generateFile("main.c", result)
	}

	def String getValue(String type, VarValue value) {
		if (type == "bool") {
			return (value.value as ValueBool).value.toString()
		} else if (type == "int" || type == "long") {
			return (value.value as ValueInt).value.toString()
		} else if (type == "float" || type == "double") {
			return (value.value as ValueFloat).value.toString()
		} else if (type == "char") {
			return value.char
		} else if (type == "string") {
			return "\"" + value.string + "\""
		} else {
			return "{{ERROR: Unknown type}}" // Unreachable!
		}
	}

	def String getDefaultValue(String type) {
		if (type == "bool") {
			return "false"
		} else if (type == "int" || type == "long") {
			return "0"
		} else if (type == "float" || type == "double") {
			return "0.0"
		} else if (type == "char") {
			return "''"
		} else if (type == "string") {
			return "\"\""
		} else {
			return "{{ERROR: Unknown type}}" // Unreachable!
		}
	}
}
