/*
 * generated by Xtext 2.19.0
 */
package org.jonpas.asel.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.emf.common.util.EList
import org.jonpas.asel.asel.Use
import org.jonpas.asel.asel.InitPin
import org.jonpas.asel.asel.InitVar
import org.jonpas.asel.asel.InitClass
import org.jonpas.asel.asel.InitWiFi
import org.jonpas.asel.asel.VarValue
import org.jonpas.asel.asel.ValueBool
import org.jonpas.asel.asel.ValueInt
import org.jonpas.asel.asel.ValueFloat
import org.jonpas.asel.asel.Param

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ASELGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var result = "// Generated by ASEL\n\n"

		// Use
		result += "#include <Arduino.h>\n"
		for (use : resource.allContents.toIterable.filter(Use)) {
			result += "#include <" + use.name + ".h>\n"
			
		}
		// WiFi include
		if (!resource.allContents.toIterable.filter(InitWiFi).empty) {
			result += "\n"
			result += '''
				#if defined(ARDUINO_ARCH_ESP8266)
				#include <ESP8266WiFi.h>
				#include <ESP8266WebServer.h>
				#elif defined(ARDUINO_ARCH_ESP32)
				#include <WiFi.h>
				#include <WebServer.h>
				#endif
				#include <PageBuilder.h>
			'''
		}
		result += "\n"

		// Init
		for (pin : resource.allContents.toIterable.filter(InitPin)) {
			result += "const int " + pin.name + " = " + pin.value + ";\n"
		}
		result += "\n"

		for (variable : resource.allContents.toIterable.filter(InitVar)) {
			result += variable.type + " " + variable.name

			val type = variable.type
			val single = variable.single
			val array = variable.array

			if (array !== null) {
				// Array initializer
				result += "["
				if (array.data.variable !== null) {
					result += array.data.variable.name // Variable length
				} else {
					result += array.data.length // Fixed length
				}
				result += "] = {"

				for (value : array.value) {
					result += getValue(type, value.value)

					if (value != array.value.last) {
						result += ", "
					}
				}
				result += "}"
			} else {
				// Single variable initializer
				result += " = "

				if (single === null) {
					// Default initializers
					result += getDefaultValue(type)
				} else {
					result += getParam(single.value)
				}
			}
			result += ";\n"
		}
		result += "\n"

		for (className : resource.allContents.toIterable.filter(InitClass)) {
			result += className.className + " " + className.name + "(" + getParams(className.param) + ");\n"
		}

		// TODO PageHandler, WiFi

		result += "\n"

		// Prepare
		result += "void setup() {\n"
		// TODO Prepare Code
		result += "}\n\n"

		// Run
		result += "void loop() {\n"
		// TODO Run Code
		result += "}\n\n"

		fsa.generateFile("main.c", result)
	}

	def String getValue(String type, VarValue value) {
		if (type == "bool") {
			return (value.value as ValueBool).value.toString()
		} else if (type == "int" || type == "long") {
			return (value.value as ValueInt).value.toString()
		} else if (type == "float" || type == "double") {
			return (value.value as ValueFloat).value.toString()
		} else if (type == "char") {
			return value.char
		} else if (type == "string") {
			return "\"" + value.string + "\""
		} else {
			return "{{ERROR: Unknown type}}" // Unreachable!
		}
	}

	def String getDefaultValue(String type) {
		if (type == "bool") {
			return "false"
		} else if (type == "int" || type == "long") {
			return "0"
		} else if (type == "float" || type == "double") {
			return "0.0"
		} else if (type == "char") {
			return "''"
		} else if (type == "string") {
			return "\"\""
		} else {
			return "{{ERROR: Unknown type}}" // Unreachable!
		}
	}

	def String getParams(EList<Param> params) {
		var result = ""

		for (param : params) {
			result += getParam(param)

			if (param != params.last) {
				result += ", "
			}
		}

		return result
	}

	def String getParam(Param param) {
		var result = ""

		if (param.value === null) {
			// Function/Method/Expression paremeter
			result += getNonValueParam(param)
		} else if (param.value.name !== null) {
			// Variable parameter
			result += param.value.name
		} else {
			// Value parameter
			var paramContainer = param.eContainer.eContainer
			while (!(paramContainer instanceof InitVar)) {
				paramContainer = paramContainer.eContainer.eContainer
			}

			val type = (paramContainer as InitVar).type
			result += getValue(type, param.value)
		}

		return result
	}

	def String getNonValueParam(Param param) {
		var result = ""

		if (param.func !== null) {
			result += param.func.name + "(" + getParams(param.func.param) + ")"
		} else if (param.method !== null) {
			result += param.method.name + "." + param.method.method + "(" + getParams(param.method.param) + ")"
		} else if (param.expr !== null) {
			result += "TODO Expr"
		} else {
			result = "{{ERROR: Unknown param}}" // Unreachable!
		}

		return result
	}
}
