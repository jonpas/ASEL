/*
 * generated by Xtext 2.19.0
 */
package org.jonpas.asel.generator

import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.runtime.Path
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.jonpas.asel.asel.Model
import org.jonpas.asel.asel.Use
import org.jonpas.asel.asel.RunCode
import org.jonpas.asel.asel.AnyCode
import org.jonpas.asel.asel.InitCode
import org.jonpas.asel.asel.InitPin
import org.jonpas.asel.asel.InitVar
import org.jonpas.asel.asel.InitClass
import org.jonpas.asel.asel.PageHandler
import org.jonpas.asel.asel.PageHandlerCode
import org.jonpas.asel.asel.HandleArg
import org.jonpas.asel.asel.InitWiFi
import org.jonpas.asel.asel.ModePin
import org.jonpas.asel.asel.VarAssign
import org.jonpas.asel.asel.FuncCall
import org.jonpas.asel.asel.MethodCall
import org.jonpas.asel.asel.PreProcInit
import org.jonpas.asel.asel.PreProcRun
import org.jonpas.asel.asel.Param
import org.jonpas.asel.asel.Logical
import org.jonpas.asel.asel.LogicalIf
import org.jonpas.asel.asel.LoopFor
import org.jonpas.asel.asel.LoopWhile
import org.jonpas.asel.asel.Condition
import org.jonpas.asel.asel.MathExpr
import org.jonpas.asel.asel.VarValue
import org.jonpas.asel.asel.ValueBool
import org.jonpas.asel.asel.ValueInt
import org.jonpas.asel.asel.ValueFloat
import org.jonpas.asel.asel.ValueChar
import org.jonpas.asel.asel.ValueString

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ASELGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.get(0) as Model

		// Header
		var result = "// Generated by ASEL\n\n"

		// Use
		result += "#include <Arduino.h>\n"
		for (use : resource.allContents.toIterable.filter(Use)) {
			result += "#include <" + use.name + ".h>\n"
		}

		// WiFi include
		if (!resource.allContents.toIterable.filter(InitWiFi).empty) {
			result += "\n"
			result += '''
				#if defined(ARDUINO_ARCH_ESP8266)
				#include <ESP8266WiFi.h>
				#include <ESP8266WebServer.h>
				#elif defined(ARDUINO_ARCH_ESP32)
				#include <WiFi.h>
				#include <WebServer.h>
				#endif
				#include <PageBuilder.h>
			'''
		}
		result += "\n"

		// Init
		val init = model.init
		if (init !== null) {
			for (code : init.code) {
				if (code instanceof InitCode) {
					result += doInitCode(code)
				} else if (code instanceof PreProcInit) {
					result += doPreProcInit(code)
				} else {
					result += "{{ERROR: Unknown 'Init'}}" // Unreachable!
				}
			}
		}
		result += "\n"

		// Prepare
		result += "void setup() {\n"
		val prepare = model.prepare
		if (prepare !== null) {
			result += doRunPreProcRunCodes(prepare.code)

			// WiFi start
			if (!resource.allContents.toIterable.filter(InitWiFi).empty) {
				var wifi = resource.allContents.toIterable.filter(InitWiFi).get(0)

				result += "\tWiFi.mode(WIFI_AP);\n"
				result += "\tWiFi.softAP(\"" + wifi.ssid + "\", \"" + wifi.password + "\");\n"
				result += "\tdelay(100);\n\n"
				result += "\tPageBuild.insert(Server);\n"
				result += "\tServer.begin();\n"
			}
		}

		result += "}\n\n"

		// Run
		result += "void loop() {\n"
		val run = model.run
		if (run !== null) {
			result += doRunPreProcRunCodes(run.code)
		}
		result += "}\n\n"

		fsa.generateFile("main.c", result)
	}

	def String doRunPreProcRunCodes(EList<EObject> codes) {
		var result = ""

		for (code : codes) {
			if (code instanceof RunCode) {
				result += doRunCode(code)
			} else if (code instanceof PreProcRun) {
				result += doPreProcRun(code)
			} else {
				result += "{{ERROR: Unknown '(Prepare|Run).code'}}" // Unreachable!
			}
		}

		return result
	}

	def String doInitCode(InitCode code) {
		if (code.pin !== null) {
			return doInitPin(code.pin)
		} else if (code.variable !== null) {
			return doInitVar(code.variable)
		} else if (code.class_ !== null) {
			return doInitClass(code.class_)
		} else if (code.pageHandle !== null) {
			return "\n" + doPageHandler(code.pageHandle)
		} else if (code.wifi !== null) {
			return "\n" + doInitWiFi(code.wifi) + "\n"
		} else if (code.any !== null) {
			return doAnyCode(code.any)
		} else {
			return "{{ERROR: Unknown 'InitCode'}}" // Unreachable!
		}
	}

	def String doRunCode(RunCode code) {
		if (code.pin !== null) {
			return doModePin(code.pin)
		} else if (code.variable !== null) {
			return doVarAssign(code.variable)
		} else if (code.wifi !== null) {
			return "Server.handleClient();\n"
		} else if (code.^return !== null) {
			return "return \"" + code.^return.name + "\";\n"
		} else if (code.any !== null) {
			return doAnyCode(code.any)
		} else {
			return "{{ERROR: Unknown 'RunCode' " + code.toString() + " }}" // Unreachable!
		}
	}

	def String doAnyCode(AnyCode code) {
		if (code.func !== null) {
			return doFuncCall(code.func) + ";\n"
		} else if (code.method !== null) {
			return doMethodCall(code.method) + ";\n"
		} else if (code.logical !== null) {
			return doLogical(code.logical)
		} else if (code.loop !== null) {
			if (code.loop.^for !== null) {
				return doLoopFor(code.loop.^for)
			} else if (code.loop.^while !== null) {
				return doLoopWhile(code.loop.^while)
			} else {
				return "{{ERROR: Unknown 'Loop'}}" // Unreachable!
			}
		} else {
			return "{{ERROR: Unknown 'AnyCode'}}" // Unreachable!
		}
	}

	def String doInitPin(InitPin pin) {
		return "const int " + pin.name + " = " + pin.value + ";\n"
	}

	def String doInitVar(InitVar variable) {
		var result = variable.type + " " + variable.name

		val type = variable.type
		val single = variable.single
		val array = variable.array

		if (array !== null) {
			// Array initializer
			result += "["
			if (array.data.variable !== null) {
				result += array.data.variable.name // Variable length
			} else {
				result += array.data.length // Fixed length
			}
			result += "] = {"

			if (array.value.empty) {
				result += "0"
			} else {
				for (value : array.value) {
					result += getValue(value.value)

					if (value != array.value.last) {
						result += ", "
					}
				}
			}
			result += "}"
		} else {
			// Single variable initializer
			result += " = "

			if (single === null) {
				// Default initializers
				result += getDefaultValue(type)
			} else {
				result += doParam(single.value)
			}
		}
		result += ";\n"
	}

	def String doInitClass(InitClass class_) {
		return class_.class_ + " " + class_.name + "(" + doParams(class_.param) + ");\n"
	}

	def String doPageHandler(PageHandler pageHandler) {
		var result = "String " + pageHandler.name + "(PageArgument &args) {\n"

		for (code : pageHandler.code) {
			result += doPageHandlerCode(code)
		}

		return result + "}\n"
	}

	def String doPageHandlerCode(PageHandlerCode code) {
		if (code.arg !== null) {
			return doHandleArg(code.arg)
		} else if (code.code instanceof RunCode) {
			return doRunCode(code.code as RunCode)
		} else if (code.code instanceof PreProcRun) {
			return doPreProcRun(code.code as PreProcRun)
		} else {
			return "{{ERROR: Unknown 'PageHandlerCode'}}" // Unreachable!
		}
	}

	def String doHandleArg(HandleArg arg) {
		var result = "if (args.hasArg(\"" + arg.name + "\")) {\n"

		for (code : arg.code) {
			result += doPageHandlerCode(code)
		}

		return result + "}\n"
	}

	def String doInitWiFi(InitWiFi wifi) {
		var result = ""

		val platformString = wifi.eResource.URI.toPlatformString(true)
		val myFile = ResourcesPlugin.workspace.root.getFile(new Path(platformString))
		val proj = myFile.project

		result += '''
			#if defined(ARDUINO_ARCH_ESP8266)
			ESP8266WebServer Server;
			#elif defined(ARDUINO_ARCH_ESP32)
			WebServer Server;
			#endif
		'''

		result += "\nstatic const char PROGMEM _page[] = R\"rawliteral(\n"
		if (wifi.pageFile != "") {
			result += new String(proj.getFile(wifi.pageFile).contents.readAllBytes)
		}
		result += '''
			)rawliteral";

			static const char PROGMEM _style[] = R"rawliteral(
		'''
		if (wifi.styleFile != "") {
			result += new String(proj.getFile(wifi.styleFile).contents.readAllBytes)
		}
		result += ")rawliteral\";\n\n"

		// Page construct
		result += '''
			PageElement Page(_page, {
				{"STYLE", [](PageArgument& arg) {
					return String(_style);
		'''

		// Button to page handler links
		for (link : wifi.buttonLinks) {
			result += "\t{\"" + link.button + "\", " + link.name.name + "}"

			if (link != wifi.buttonLinks.last) {
				result += ","
			}

			result += "\n"
		}

		result += '''
			});
			PageBuilder PageBuild("/", {Page});
		'''
	}

	def String doModePin(ModePin pin) {
		var result = "pinMode(" + pin.name.name + ", "

		if (pin.mode == "out") {
			result += "out"
		} else if (pin.mode == "in") {
			result += "in"
		} else {
			result += "{{ERROR: Unknown 'ModePin.mode'}}" // Unreachable!
		}

		return result + ");\n"
	}

	def String doVarAssign(VarAssign variable) {
		// TODO `PIN = on/off` and `BUTTON = pushed/released`
		var result = variable.name

		if (variable.arrayLength !== null) {
			result += "["
			if (variable.arrayLength.variable !== null) {
				result += variable.arrayLength.variable.name
			} else {
				result += variable.arrayLength.length
			}
			result += "]"
		}

		result += " "
		if (variable.operator !== null) {
			result += variable.operator
		}
		result += "= "

		if (variable.sign !== null) {
			result += variable.sign
		}

		return result + doParam(variable.value) + ";\n"
	}

	def String doFuncCall(FuncCall func) {
		return func.name + "(" + doParams(func.param) + ")"
	}

	def String doMethodCall(MethodCall method) {
		return method.name + "." + method.method + "(" + doParams(method.param) + ")"
	}

	def String doPreProcInit(PreProcInit preproc) {
		if (preproc.raw !== null) {
			return preproc.raw.raw + "\n"
		} else if (preproc.ifdef !== null) {
			var result = "#if " + doCondition(preproc.ifdef.cond) + "\n"

			for (ifdefCode : preproc.ifdef.code) {
				result += doInitCode(ifdefCode)
			}

			return result + "#endif\n\n"
		} else {
			return "{{ERROR: Unknown 'PreProcInit'}}" // Unreachable!
		}
	}

	def String doPreProcRun(PreProcRun preproc) {
		if (preproc.raw !== null) {
			return preproc.raw.raw + "\n"
		} else if (preproc.ifdef !== null) {
			var result = "#if " + doCondition(preproc.ifdef.cond) + "\n"

			for (code : preproc.ifdef.code) {
				result += doRunCode(code)
			}

			return result + "#endif\n\n"
		} else {
			return "{{ERROR: Unknown 'PreProcRun'}}" // Unreachable!
		}
	}

	def String doParams(EList<Param> params) {
		var result = ""

		for (param : params) {
			result += doParam(param)

			if (param != params.last) {
				result += ", "
			}
		}

		return result
	}

	def String doParam(Param param) {
		var result = ""

		if (param.value === null) {
			// Function/Method/Expression paremeter
			result += doParamNonValue(param)
		} else if (param.value.name !== null) {
			// Variable parameter
			result += param.value.name
		} else {
			// Value parameter
			result += getValue(param.value)
		}

		return result
	}

	def String doParamNonValue(Param param) {
		var result = ""

		if (param.func !== null) {
			result += doFuncCall(param.func)
		} else if (param.method !== null) {
			result += doMethodCall(param.method)
		} else if (param.expr !== null) {
			result += doMathExpr(param.expr)
		} else {
			result = "{{ERROR: Unknown 'Param'}}" // Unreachable!
		}

		return result
	}

	def String doLogical(Logical logical) {
		if (logical.^if !== null) {
			return doLogicalIf(logical.^if)
		} else {
			return "{{ERROR: Unknown 'Logical'}}" // Unreachable!
		}
	}

	def String doLogicalIf(LogicalIf logical) {
		var result = "if (" + doCondition(logical.cond) + ") {\n" + doRunPreProcRunCodes(logical.code) + "}"

		for (^else : logical.^else) {
			result += " else "

			if (^else.nestedCond !== null) {
				result += "if (" + doCondition(^else.nestedCond) + ")"
			}

			result += "{\n" + doRunPreProcRunCodes(^else.code) + "}"
		}

		return result + "\n"
	}

	def String doLoopFor(LoopFor loop) {
		return "for (" + loop.name + " = " + loop.from + "; " + loop.name + " < " + loop.to + "; ++" + loop.name +
			") {\n" + doRunPreProcRunCodes(loop.code) + "}\n"
	}

	def String doLoopWhile(LoopWhile loop) {
		return "while (" + doCondition(loop.cond) + ") {\n" + doRunPreProcRunCodes(loop.code) + "}\n"
	}

	def String doCondition(Condition cond) {
		// TODO Condition
		// TODO `PIN == on/off` and `BUTTON == pushed/released
		return "TODO[CONDITION]"
	}

	def String doMathExpr(MathExpr expr) {
		var result = getValue(expr.value)

		for (subExpr : expr.subExpr) {
			result += " " + subExpr.operator + " " + getValue(subExpr.value)
		}

		return result
	}

	def String getValue(VarValue value) {
		if (value.value instanceof ValueBool) {
			return (value.value as ValueBool).value.toString()
		} else if (value.value instanceof ValueInt) {
			return (value.value as ValueInt).value.toString()
		} else if (value.value instanceof ValueFloat) {
			return (value.value as ValueFloat).value.toString()
		} else if (value.value instanceof ValueChar) {
			return (value.value as ValueChar).char
		} else if (value.value instanceof ValueString) {
			return "\"" + (value.value as ValueString).string + "\""
		} else if (!value.keyword.isNullOrEmpty) {
			return value.keyword
		} else if (!value.name.isNullOrEmpty) {
			return value.name
		} else {
			return "{{ERROR: Unknown 'VarValue'}}" // Unreachable!
		}
	}

	def String getDefaultValue(String type) {
		if (type == "bool") {
			return "false"
		} else if (type == "int" || type == "long") {
			return "0"
		} else if (type == "float" || type == "double") {
			return "0.0"
		} else if (type == "char") {
			return "''"
		} else if (type == "string") {
			return "\"\""
		} else {
			return "{{ERROR: Unknown 'VarValue' type}}" // Unreachable!
		}
	}
}
