/*
 * generated by Xtext 2.19.0
 */
package org.jonpas.asel.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.jonpas.asel.asel.Use
import org.jonpas.asel.asel.InitPin
import org.jonpas.asel.asel.InitVar
import org.jonpas.asel.asel.InitClass

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ASELGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var result = "// Generated by ASEL\n\n"

		// Use
		result += "#include <Arduino.h>\n"
		for (use : resource.allContents.toIterable.filter(Use)) {
			result += "#include <" + use.name + ".h>\n";
			
		}
		// TODO WiFi include if 'InitWiFi' present
		result += "\n"

		// Init
		result += "init {\n"
		for (pin : resource.allContents.toIterable.filter(InitPin)) {
			result += "\tconst int " + pin.name + " = " + pin.value + ";\n"
		}
		result += "\n"

		for (variable : resource.allContents.toIterable.filter(InitVar)) {
			result += "\t" + variable.type + " " + variable.name

			val type = variable.type
			val single = variable.single
			val array = variable.array

			if (array !== null) {
				result += "["
				if (array.data.variable !== null) {
					result += array.data.variable.name
				} else {
					result += array.data.length
				}
				result += "] = {"

				for (value : array.value) {
					if (type == "bool") {
						result += value.value.valueBool.value
					} else if (type == "int" || type == "long") {
						result += value.value.valueInt.value
					} else if (type == "float" || type == "double") {
						result += value.value.valueFloat.value
					} else if (type == "char") {
						result += value.value.char
					} else if (type == "string") {
						result += "\"" + value.value.string + "\""
					}

					if (value != array.value.get(array.value.length - 1)) {
						result += ", "
					}
				}
				result += "}"
			} else {
				result += " = "

				var done = false
				if (single !== null) {
					if (single.value.value === null) {
						result += "TODO func/method call or expression" //single.value.func
						done = true
					} else if (single.value.value.name !== null) {
						result += single.value.value.name
						done = true
					}
				}

				if (!done) {
					if (type == "bool") {
						if (single !== null) {
							result += single.value.value.valueBool.value
						} else {
							result += "false"
						}
					} else if (type == "int" || type == "long") {
						if (single !== null) {
							result += single.value.value.valueInt.value
						} else {
							result += "0"
						}
					} else if (type == "float" || type == "double") {
						if (single !== null) {
							result += single.value.value.valueFloat.value
						} else {
							result += "0.0"
						}
					} else if (type == "char") {
						if (single !== null) {
							result += single.value.value.char
						} else {
							result += "''"
						}
					} else if (type == "string") {
						if (single !== null) {
							result += "\"" + single.value.value.string + "\""
						} else {
							result += "\"\""
						}
					}
				}
			}
			result += ";\n"
		}
		result += "\n"

		for (className : resource.allContents.toIterable.filter(InitClass)) {
			result += "\t" + className.className + " " + className.name + "("
			for (param : className.param) {
				result += param
				if (param != className.param.get(className.param.length - 1)) {
					result += ", "
				}
			}
			result += ");\n"
		}
		// TODO PageHandler, WiFi
		result += "}\n\n"

		// Prepare
		result += "prepare {\n"
		// TODO Prepare Code
		result += "}\n\n"

		// Run
		result += "run {\n"
		// TODO Run Code
		result += "}\n\n"

		fsa.generateFile("main.c", result)
	}
}
