/*
 * generated by Xtext 2.19.0
 */
package org.jonpas.asel.generator

import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.runtime.Path
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.jonpas.asel.asel.Use
import org.jonpas.asel.asel.InitPin
import org.jonpas.asel.asel.InitVar
import org.jonpas.asel.asel.InitClass
import org.jonpas.asel.asel.PageHandler
import org.jonpas.asel.asel.InitWiFi
import org.jonpas.asel.asel.Param
import org.jonpas.asel.asel.MathExpr
import org.jonpas.asel.asel.ValueBool
import org.jonpas.asel.asel.ValueFloat
import org.jonpas.asel.asel.ValueInt
import org.jonpas.asel.asel.VarValue
import org.jonpas.asel.asel.ValueChar
import org.jonpas.asel.asel.ValueString

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ASELGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		// Header
		var result = "// Generated by ASEL\n\n"

		// Use
		result += "#include <Arduino.h>\n"
		for (use : resource.allContents.toIterable.filter(Use)) {
			result += "#include <" + use.name + ".h>\n"
		}

		// WiFi include
		if (!resource.allContents.toIterable.filter(InitWiFi).empty) {
			result += "\n"
			result += '''
				#if defined(ARDUINO_ARCH_ESP8266)
				#include <ESP8266WiFi.h>
				#include <ESP8266WebServer.h>
				#elif defined(ARDUINO_ARCH_ESP32)
				#include <WiFi.h>
				#include <WebServer.h>
				#endif
				#include <PageBuilder.h>
			'''
		}
		result += "\n"

		/* Init */
		// Pin
		for (pin : resource.allContents.toIterable.filter(InitPin)) {
			result += "const int " + pin.name + " = " + pin.value + ";\n"
		}
		result += "\n"

		// Variable
		for (variable : resource.allContents.toIterable.filter(InitVar)) {
			result += variable.type + " " + variable.name

			val type = variable.type
			val single = variable.single
			val array = variable.array

			if (array !== null) {
				// Array initializer
				result += "["
				if (array.data.variable !== null) {
					result += array.data.variable.name // Variable length
				} else {
					result += array.data.length // Fixed length
				}
				result += "] = {"

				for (value : array.value) {
					result += getValue(type, value.value)

					if (value != array.value.last) {
						result += ", "
					}
				}
				result += "}"
			} else {
				// Single variable initializer
				result += " = "

				if (single === null) {
					// Default initializers
					result += getDefaultValue(type)
				} else {
					result += getParam(single.value)
				}
			}
			result += ";\n"
		}
		result += "\n"

		// Class
		for (className : resource.allContents.toIterable.filter(InitClass)) {
			result += className.className + " " + className.name + "(" + getParams(className.param) + ");\n"
		}
		result += "\n"

		// PageHandler
		for (pageHandler : resource.allContents.toIterable.filter(PageHandler)) {
			result += "pagehandle " + pageHandler.name + " {\n"

			// TODO PageHandlerCode
			// TODO ModePin
			// TODO VarAssign
			// TODO RETURN
			// TODO FuncCall
			// TODO MethodCall
			// TODO Logical
			// TODO Loop
			// TODO PreProcRun

			result += "}\n"
		}
		result += "\n"

		// WiFi
		if (!resource.allContents.toIterable.filter(InitWiFi).empty) {
			var wifi = resource.allContents.toIterable.filter(InitWiFi).get(0)
			
			val platformString = wifi.eResource.URI.toPlatformString(true)
			val myFile = ResourcesPlugin.workspace.root.getFile(new Path(platformString))
			val proj = myFile.project

			result += '''
				#if defined(ARDUINO_ARCH_ESP8266)
				ESP8266WebServer Server;
				#elif defined(ARDUINO_ARCH_ESP32)
				WebServer Server;
				#endif
			'''
				
			result += "\nstatic const char PROGMEM _page[] = R\"rawliteral(\n"
			if (wifi.pageFile != "") {
				result += new String(proj.getFile(wifi.pageFile).contents.readAllBytes)
			}
			result += '''
				)rawliteral";
				
				static const char PROGMEM _style[] = R"rawliteral(
			'''
			if (wifi.styleFile != "") {
				result += new String(proj.getFile(wifi.styleFile).contents.readAllBytes)
			}
			result += ")rawliteral\";\n\n"

			// Page construct
			result += '''
				PageElement Page(_page, {
					{"STYLE", [](PageArgument& arg) {
						return String(_style);
			'''

			// Button to page handler links
			for (link : wifi.buttonLinks) {
				result += "\t{\"" + link.button + "\", " + link.name.name + "}"

				if (link != wifi.buttonLinks.last) {
					result += ","
				}

				result += "\n"
			}

			result += '''
				});
				PageBuilder PageBuild("/", {Page});
			'''
		}
		result += "\n"
		
		// TODO PreProcInit

		// Prepare
		result += "void setup() {\n"

		// TODO Prepare Code
		// TODO ModePin
		// TODO VarAssign
		// TODO FuncCall
		// TODO MethodCall
		// TODO Logical
		// TODO Loop
		// TODO PreProcRun

		// WiFi
		if (!resource.allContents.toIterable.filter(InitWiFi).empty) {
			var wifi = resource.allContents.toIterable.filter(InitWiFi).get(0)

			result += "\tWiFi.mode(WIFI_AP);\n"
			result += "\tWiFi.softAP(\"" + wifi.ssid + "\", \"" + wifi.password + "\");\n"
			result += "\tdelay(100);\n\n"
			result += "\tPageBuild.insert(Server);\n"
			result += "\tServer.begin();\n"
		}

		result += "}\n\n"

		// Run
		result += "void loop() {\n"
		// TODO Run Code
		// TODO ModePin
		// TODO VarAssign
		// TODO WIFI
		// TODO FuncCall
		// TODO MethodCall
		// TODO Logical
		// TODO Loop
		// TODO PreProcRun
		result += "}\n\n"

		fsa.generateFile("main.c", result)
	}

	def String getValue(String type, VarValue value) {
		if (type == "bool") {
			return (value.value as ValueBool).value.toString()
		} else if (type == "int" || type == "long") {
			return (value.value as ValueInt).value.toString()
		} else if (type == "float" || type == "double") {
			return (value.value as ValueFloat).value.toString()
		} else if (type == "char") {
			return (value.value as ValueChar).char
		} else if (type == "string") {
			return "\"" + (value.value as ValueString).string + "\""
		} else {
			return "{{ERROR: Unknown type}}" // Unreachable!
		}
	}

	def String getDefaultValue(String type) {
		if (type == "bool") {
			return "false"
		} else if (type == "int" || type == "long") {
			return "0"
		} else if (type == "float" || type == "double") {
			return "0.0"
		} else if (type == "char") {
			return "''"
		} else if (type == "string") {
			return "\"\""
		} else {
			return "{{ERROR: Unknown type}}" // Unreachable!
		}
	}

	def String getParams(EList<Param> params) {
		var result = ""

		for (param : params) {
			result += getParam(param)

			if (param != params.last) {
				result += ", "
			}
		}

		return result
	}

	def String getParam(Param param) {
		var result = ""

		if (param.value === null) {
			// Function/Method/Expression paremeter
			result += getNonValueParam(param)
		} else if (param.value.name !== null) {
			// Variable parameter
			result += param.value.name
		} else {
			// Value parameter
			var paramContainer = param.eContainer.eContainer
			while (!(paramContainer instanceof InitVar)) {
				paramContainer = paramContainer.eContainer.eContainer
			}

			val type = (paramContainer as InitVar).type
			result += getValue(type, param.value)
		}

		return result
	}

	def String getNonValueParam(Param param) {
		var result = ""

		if (param.func !== null) {
			result += param.func.name + "(" + getParams(param.func.param) + ")"
		} else if (param.method !== null) {
			result += param.method.name + "." + param.method.method + "(" + getParams(param.method.param) + ")"
		} else if (param.expr !== null) {
			result += compileMathExpr(param.expr)
		} else {
			result = "{{ERROR: Unknown param}}" // Unreachable!
		}

		return result
	}

	def String compileMathExpr(MathExpr expr) {
		var result = "TODO Expr"
		return result
	}
}
