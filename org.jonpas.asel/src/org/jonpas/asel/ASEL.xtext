grammar org.jonpas.asel.ASEL hidden(WS, SL_COMMENT)

generate asel "http://www.jonpas.org/asel/ASEL"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// Base program
Model:
	use+=Use* init=Init? prepare=Prepare? run=Run?;

Init:
	{Init} 'init' '{' code+=(InitCode | PreProcInit)* '}';

Prepare:
	{Prepare} 'prepare' '{' code+=(RunCode | PreProcRun)* '}';

Run:
	{Run} 'run' '{' code+=(RunCode | PreProcRun)* '}';

Use:
	'use' name=ID;

	// Code structure
InitCode:
	pin=InitPin | variable=InitVar | class=InitClass | pageHandle=PageHandler | wifi=InitWiFi | any=AnyCode;

RunCode:
	pin=ModePin | variable=VarAssign | {RunCode} wifi=WIFI | return=RETURN | any=AnyCode;

AnyCode:
	func=FuncCall | method=MethodCall | logical=Logical | loop=Loop;

	// init
InitPin:
	'pin' name=ID '=' (value=INT | macro=PIN_MACROS);

InitVar:
	type=VAR_TYPE name=ID (single=InitSingle? | array=InitArray);

InitSingle:
	'=' sign=SIGN? value=Param;

InitArray:
	data=ArrayAccess ('=' '{' value+=Param* '}')?;

InitClass:
	'class' name=ID '=' class=ID '(' param+=Param* ')';

PageHandler:
	'pagehandle' name=ID '{' code+=PageHandlerCode* '}';

PageHandlerCode:
	arg=HandleArg | code=(RunCode | PreProcRun);

HandleArg:
	'handle' name=STRING '{' code+=PageHandlerCode* '}';

RETURN:
	'->' name=STRING;

InitWiFi:
	WIFI ssid=STRING password=STRING pageFile=STRING styleFile=STRING '{' buttonLinks+=WiFiLink* '}';

WiFiLink:
	button=STRING '->' name=[PageHandler];

	// run
ModePin:
	mode=PIN_MODE name=[InitPin];

VarAssign:
	name=ID arrayLength=ArrayAccess? operator=MATH_OP? '=' sign=SIGN? value=Param;

	// any
FuncCall:
	name=ID '(' param+=Param* ')';

MethodCall:
	name=ID '.' method=ID '(' param+=Param* ')';

PreProcInit:
	raw=PreProcRaw | ifdef=PreProcIfdefInit;

PreProcRun:
	raw=PreProcRaw | ifdef=PreProcIfdefRun;

PreProcRaw:
	'raw' raw=STRING;

PreProcIfdefInit:
	'ifdef' cond=Condition '{' code+=InitCode* '}';

PreProcIfdefRun:
	'ifdef' cond=Condition '{' code+=RunCode* '}';

Param:
	value=VarValue | func=FuncCall | method=MethodCall | expr=MathExpr;

	// Expressions
Logical:
	if=LogicalIf;

LogicalIf:
	'if' cond=Condition '{' code+=(RunCode | PreProcRun)* '}' else+=LogicalElse*;

LogicalElse:
	{LogicalElse} 'else' ('if' nestedCond=Condition)? '{' code+=(RunCode | PreProcRun)* '}';

Loop:
	for=LoopFor | while=LoopWhile;

LoopFor:
	'for' name=ID 'in' from=ForType '->' '='? to=ForType '{' code+=(RunCode | PreProcRun)* '}';

LoopWhile:
	'while' cond=Condition '{' code+=(RunCode | PreProcRun)* '}';

Condition:
	sign=NEGATE_OP? type=ConditionType subCond+=SubCondition*;

SubCondition:
	operator=LOGICAL_OP sign=NEGATE_OP? cond=ConditionType;

ConditionType:
	value=VarValue | comp=Comparison | func=FuncCall | method=MethodCall;

Comparison:
	valueLeft=VarValue comp=COMPARE_OP valueRight=VarValue;

MathExpr:
	value=VarValue subExpr+=MathSubExpr+;

MathSubExpr:
	operator=MATH_OP value=VarValue;

	// General
VarValue:
	value=(ValueBool | ValueInt /* LONG same as INT */ | ValueFloat /* DOUBLE same as FLOAT */ | ValueChar | ValueString)
	| keyword=KEYWORD | name=ID | name=ID data=ArrayAccess;

ValueBool:
	value=BOOL;

ValueInt:
	value=INT;

ValueFloat:
	value=FLOAT;

ValueChar:
	char=CHAR;

ValueString:
	string=STRING;

ForType:
	INT /* LONG same as INT */ | FLOAT /* DOUBLE same as FLOAT */ | ID;

ArrayAccess:
	'[' (length=INT | variable=[InitVar]) ']';

PIN_MACROS:
	'LED_BUILTIN';

PIN_MODE:
	'out' | 'in';

KEYWORD:
	'pushed' | 'released' | 'on' | 'off';

VAR_TYPE:
	'bool' | 'int' | 'long' | 'float' | 'double' | 'char' | 'string';

SIGN returns ecore::EString:
	'-' | '+' | NEGATE_OP;

NEGATE_OP:
	'!';

LOGICAL_OP:
	'||' | '&&';

COMPARE_OP:
	'==' | '!=' | '<' | '>' | '<=' | '>=';

MATH_OP:
	'+' | '-' | '/' | '*' | '^';

WIFI:
	'wifi';

terminal BOOL returns ecore::EBoolean:
	'true' | 'false';

terminal FLOAT returns ecore::EFloat:
	INT '.' INT;

terminal INT returns ecore::EInt: // Default (Terminals grammar)
	('0'..'9')+;

terminal CHAR returns ecore::EString:
	"'" ('a'..'z' | 'A'..'Z') "'";

terminal STRING returns ecore::EString:
	'"' ('\\' . | !('\\' | '"'))* '"';

terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

terminal SL_COMMENT:
	'#' !('\n' | '\r')*;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;
