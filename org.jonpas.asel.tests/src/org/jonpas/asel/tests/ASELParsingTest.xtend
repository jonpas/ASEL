/*
 * generated by Xtext 2.19.0
 */
package org.jonpas.asel.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.jonpas.asel.asel.Model
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.jonpas.asel.asel.AselPackage
import org.jonpas.asel.validation.ASELValidator

@ExtendWith(InjectionExtension)
@InjectWith(ASELInjectorProvider)
class ASELParsingTest {
	@Inject ParseHelper<Model> parseHelper
	@Inject extension ValidationTestHelper

	@Test
	def void loadModelIncorrect() {
		val result = parseHelper.parse('''
			Hello Xtext!
		''')
		Assertions.assertNull(result, 'Parsing not correct')
	}

	@Test
	def void loadModelCorrect() {
		val result = parseHelper.parse('''
			init {}
			prepare {}
			run {}
		''')
		Assertions.assertNotNull(result)
	}

	@Test
	def void validatorPinNameAllCaps() {
		val result = parseHelper.parse('''
			init {
				pin led = 0
			}
		''')
		Assertions.assertNotNull(result)
		result.assertWarning(AselPackage.Literals.INIT_PIN, ASELValidator.INVALID_PIN_NAME)
	}

	@Test
	def void validatorArrayInitLength() {
		val resultInt = parseHelper.parse('''
			init {
				int a[5] = {0 1}
			}
		''')
		Assertions.assertNotNull(resultInt)
		resultInt.assertError(AselPackage.Literals.INIT_ARRAY, ASELValidator.INVALID_ARRAY_LENGTH)

		val resultId = parseHelper.parse('''
			init {
				int x = 5
				int a[x] = {0 1}
			}
		''')
		Assertions.assertNotNull(resultId)
		resultId.assertError(AselPackage.Literals.INIT_ARRAY, ASELValidator.INVALID_ARRAY_LENGTH)
	}

	@Test
	def void validatorVarSignExcessive() {
		val resultInit = parseHelper.parse('''
			init {
				int x = +2
			}
		''')
		Assertions.assertNotNull(resultInit)
		resultInit.assertWarning(AselPackage.Literals.INIT_SINGLE, ASELValidator.EXCESSIVE_SIGN)

		val resultRun = parseHelper.parse('''
			run {
				x = +2
			}
		''')
		Assertions.assertNotNull(resultRun)
		resultRun.assertWarning(AselPackage.Literals.VAR_ASSIGN, ASELValidator.EXCESSIVE_SIGN)
	}

	@Test
	def void validatorVarSignInvalidNegation() {
		val resultInit = parseHelper.parse('''
			init {
				int x = !2
			}
		''')
		Assertions.assertNotNull(resultInit)
		resultInit.assertError(AselPackage.Literals.INIT_SINGLE, ASELValidator.INVALID_ASSIGN_NEGATION)

		val resultRun = parseHelper.parse('''
			run {
				x = !"str"
			}
		''')
		Assertions.assertNotNull(resultRun)
		resultRun.assertError(AselPackage.Literals.VAR_ASSIGN, ASELValidator.INVALID_ASSIGN_NEGATION)
	}

	@Test
	def void validatorNamesAreUnique() {
		val resultPins= parseHelper.parse('''
			init {
				pin LED = 0
				pin LED = 1
			}
		''')
		Assertions.assertNotNull(resultPins)
		resultPins.assertError(AselPackage.Literals.INIT_PIN, ASELValidator.NON_UNIQUE_NAME)

		val resultVars = parseHelper.parse('''
			init {
				int x
				int x
			}
		''')
		Assertions.assertNotNull(resultVars)
		resultVars.assertError(AselPackage.Literals.INIT_VAR, ASELValidator.NON_UNIQUE_NAME)

		val resultClass = parseHelper.parse('''
			init {
				class x = X()
				class x = Y()
			}
		''')
		Assertions.assertNotNull(resultClass)
		resultClass.assertError(AselPackage.Literals.INIT_CLASS, ASELValidator.NON_UNIQUE_NAME)

		val resultPageHandle = parseHelper.parse('''
			init {
				pagehandle x {}
				pagehandle x {}
			}
		''')
		Assertions.assertNotNull(resultPageHandle)
		resultPageHandle.assertError(AselPackage.Literals.PAGE_HANDLER, ASELValidator.NON_UNIQUE_NAME)
	}

	@Test
	def void validatorInitTypesMatch() {
		val resultInit = parseHelper.parse('''
			init {
				bool x = 5
			}
		''')
		Assertions.assertNotNull(resultInit)
		resultInit.assertError(AselPackage.Literals.INIT_VAR, ASELValidator.INVALID_INIT_TYPE)

		val resultRun = parseHelper.parse('''
			init {
				int x[2] = {false, true}
			}
		''')
		Assertions.assertNotNull(resultRun)
		resultRun.assertError(AselPackage.Literals.INIT_VAR, ASELValidator.INVALID_INIT_TYPE)
	}
}
